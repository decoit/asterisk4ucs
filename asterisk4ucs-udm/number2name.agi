#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Copyright (C) 2012 DECOIT GmbH <asterisk4ucs@decoit.de>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License version 3 as
published by the Free Software Foundation

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
"""

import re
import sys
import time
import ldap
import random
import logging
import psycopg2
import psycopg2.extras

LOG_FILENAME = '/tmp/ast4ucs-number2name.log'

# read options from config file
config = open("/etc/asterisk4ucs.ldapconfig").read().split("\n")
LDAP_IP = config[0]
LDAP_SEARCH_BASE = config[1]
ADMIN_DN = config[2]
ADMIN_PW = config[3]

# Logging konfigurieren, bei Fehlern einfach level=logging.DEBUG setzen und Logfile beobachten!
logging.basicConfig(
	filename=LOG_FILENAME,
	level=logging.ERROR,
	#level=logging.INFO,
	#level=logging.DEBUG,
	format="%(asctime)s\t%(levelname)s\t%(message)s",
	datefmt="%d.%m.%Y %H:%M:%S"
)

# Read and ignore AGI environment (read until blank line)
env = dict()
while len(sys.argv) < 2:
	line = sys.stdin.readline().strip()
	if not line:
		break

	logging.debug("line: %s" % (line))
	key, value = line.split(':', 2)
	if key[:4] != 'agi_':
		continue

	key = key.strip()
	value = value.strip()
	if key:
		env[key] = value
else:
	# called with arguments: debug mode
	env["agi_callerid"] = sys.argv[1]

# Nummer normalisieren
search_num = env['agi_callerid']

if search_num.startswith('00'):
	search_num = "+" + search_num[2:]
elif search_num.startswith('0'):
	search_num = "+49" + search_num[1:]

logging.info("Normalisierte Nummer: " + search_num)

logging.debug("Verbinde mit LDAP-Server: " + LDAP_IP)
l = ldap.initialize("ldap://" + LDAP_IP)
l.simple_bind_s(ADMIN_DN, ADMIN_PW)

query = ("(|"
		"(ast4ucsContactFaxnumber=%s)"
		"(telephoneNumber=%s)"
		"(ast4ucsContactMobilenumber=%s)"
	")") % (search_num, search_num, search_num)
logging.debug("Query: %s" % query)

result = l.search_s(LDAP_SEARCH_BASE, ldap.SCOPE_SUBTREE, query)

if not result:
	logging.info("Keinen Namen gefunden, exit")
	sys.exit(0)

result = result[0][1]
unwrap = lambda x: x[0] if x else None

orga = unwrap(result.get('o'))
last = unwrap(result.get('ast4ucsContactLastname'))
first = unwrap(result.get('ast4ucsContactFirstname'))

if first and last:
	name = "%s %s" % (first, last)
elif last:
	name = last
else:
	name = first  # could be string or None

if orga and name:
	cn = "%s (%s)" % (name, orga)
elif orga:
	cn = orga
else:
	cn = name  # could be string or None

if not cn:
	logging.info("Kontakt hat weder Name noch Organisation, exit")
	sys.exit(0)

cname = "%s <%s>" % (cn, env["agi_callerid"])

# Sonderzeichen ersetzen
rules = [
#	(" ", "_"),
	("ä", "ae"),
	("ö", "oe"),
	("ü", "ue"),
	("Ä", "Ae"),
	("Ö", "Oe"),
	("Ü", "Ue"),
	("ß", "ss"),
]

for rule in rules:
	cname = cname.replace(rule[0], rule[1])

# Namen an Asterisk senden
logging.info("Setze Variable CALLERID auf " + cname)
#cname = unicode(cname, 'utf-8').encode('iso-8859-1')
sys.stdout.write('SET CALLERID "%s"\n' % (cname))
sys.stdout.flush()

logging.shutdown()
